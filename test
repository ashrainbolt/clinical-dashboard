<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ClinicalX: Interactive Dashboard v8</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <style>
        :root { --sidebar-width: 260px; }
        body { font-family: 'Inter', sans-serif; background-color: #f9fafb; color: #1f2937; transition: background-color 0.3s, color 0.3s;}
        .dark body { background-color: #111827; color: #d1d5db; }
        .sidebar { width: var(--sidebar-width); }
        .main-content { margin-left: var(--sidebar-width); }
        .sidebar-link { transition: background-color 0.2s, color 0.2s; }
        .sidebar-link.active { background-color: #eef2ff; color: #4338ca; }
        .dark .sidebar-link.active { background-color: #312e81; color: #e0e7ff; }
        .scenario-card { transition: transform 0.2s, box-shadow 0.2s, background-color 0.3s; border-left-width: 4px; }
        .scenario-card:hover { transform: translateY(-4px); box-shadow: 0 7px 14px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05);}
        .dark .scenario-card:hover { box-shadow: 0 7px 14px -3px rgba(0,0,0,0.25), 0 4px 6px -2px rgba(0,0,0,0.2);}
        .loader {width: 20px; height: 20px; border: 2px solid #f3f3f3; border-top: 2px solid #4f46e5; border-radius: 50%; animation: spin 1s linear infinite;}
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .modal-content, .toast-notification { animation: slide-up 0.3s ease-out; }
        @keyframes slide-up { from { transform: translateY(30px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
        .used-badge { background: #dcfce7; color: #166534; font-size: 0.75em; padding: 0.2em 0.6em; border-radius: 1em; margin-left: 0.5em;}
        .dark .used-badge { background: #14532d; color: #bbf7d0;}
    </style>
</head>
<body>
<div class="flex">
    <!-- Sidebar -->
    <aside id="sidebar" class="sidebar fixed top-0 left-0 h-screen bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-800 flex flex-col p-4">
        <div class="flex items-center gap-3 mb-8">
            <div class="bg-indigo-600 p-2 rounded-lg">
                <i data-lucide="activity" class="text-white"></i>
            </div>
            <h1 class="text-2xl font-bold text-gray-800 dark:text-white">ClinicalX</h1>
        </div>
        <nav id="sidebar-nav" class="flex-grow space-y-2"></nav>
        <div class="mt-auto">
            <div id="user-id-display" class="text-xs text-center text-gray-400 dark:text-gray-600 mt-1 font-mono">Ready</div>
            <div class="flex items-center justify-center space-x-2 mt-4">
                <button id="theme-toggle" class="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700" title="Toggle Theme">
                    <i data-lucide="sun" id="theme-icon-light" class="h-5 w-5 hidden"></i>
                    <i data-lucide="moon" id="theme-icon-dark" class="h-5 w-5"></i>
                </button>
            </div>
        </div>
    </aside>
    <!-- Main Content -->
    <main class="main-content w-full p-6 md:p-10">
        <div id="search-container" class="w-full max-w-xl mx-auto mb-6">
            <input id="searchBox" placeholder="Search scripts, tags, or summary..." class="w-full p-2 rounded border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-100" />
            <button id="resetSession" class="ml-2 mt-2 px-3 py-1 text-xs bg-gray-100 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600">Reset Session</button>
        </div>
        <div id="used-session-panel"></div>
        <div id="content-area" class="mt-2"></div>
    </main>
</div>

<!-- Modals -->
<div id="scenarioModal" class="hidden fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50">
    <div class="modal-content bg-white dark:bg-gray-800 rounded-2xl shadow-xl w-full max-w-3xl max-h-[90vh] flex flex-col">
        <div class="modal-header flex justify-between items-center p-5 border-b border-gray-200 dark:border-gray-700">
            <h3 id="modalTitle" class="text-2xl font-bold flex-1 pr-4"></h3>
            <button id="closeModal" class="text-gray-500 dark:text-gray-400 hover:text-black dark:hover:text-white transition-colors p-2 ml-2" title="Close">
                <i data-lucide="x" class="h-6 w-6"></i>
            </button>
        </div>
        <div id="modalBody" class="modal-body p-6 overflow-y-auto"></div>
    </div>
</div>
<div id="toast" class="hidden fixed bottom-5 right-5 bg-green-500 text-white py-2 px-4 rounded-lg shadow-lg z-50"></div>

<script type="module">
// ---- DATA ----
const clinicalData = {
  red: {
    title: "ðŸ”´ Red Zone â€“ Immediate Risk & Crisis",
    color: "red",
    scenarios: [
      {
        id: "suicidal-ideation-assessment",
        title: "Suicidal Ideation â€“ Safety Assessment",
        tags: ["suicide", "safety", "risk", "escalation"],
        content: `
Assess for imminent risk. Ask about intent, plan, means, and recent actions. Prioritize safety planning and rapid escalation to crisis support if needed. See full protocol for detailed steps.
---
"Before we go any deeper, our priority is always your safety. I'd like to ask a few questions..." (expand for full script)
        `
      },
      {
        id: "self-harm-urges",
        title: "Self-Harm Urges (Non-Suicidal Self-Injury)",
        tags: ["self-harm", "urges", "coping", "validation"],
        content: `
Ask about current urges, actions, and safety. Validate the urge as a coping signal, offer alternatives, and review commitment to safety. Explore urge surfing and grounding.
---
"Thank you for telling me. I need to ask: Are you having urges to hurt yourself right now?" (expand for full script)
        `
      }
      // Add more Red Zone scenarios here...
    ]
  },
  orange: {
    title: "ðŸŸ  Orange Zone â€“ High Distress",
    color: "orange",
    scenarios: [
      {
        id: "highly-agitated",
        title: "Highly Agitated or Escalating",
        tags: ["anger", "agitation", "de-escalation", "validation"],
        content: `
Acknowledge agitation, maintain calm presence, encourage slow breathing and self-expression. Offer grounding and reflection after de-escalation.
---
"I can see (or hear) how agitated you are. Let's take a pause..." (expand for full script)
        `
      }
      // Add more Orange Zone scenarios here...
    ]
  },
  yellow: {
    title: "ðŸŸ¨ Yellow Zone â€“ Moderate Challenges",
    color: "yellow",
    scenarios: [
      {
        id: "shame-guilt",
        title: "Shame, Self-Hatred, or Guilt",
        tags: ["shame", "guilt", "self-compassion", "reframing"],
        content: `
Challenge global self-criticism, separate actions from self, invite specifics, and encourage compassion. Use cognitive and narrative interventions.
---
"I hear you saying some really harsh things about yourself..." (expand for full script)
        `
      }
      // Add more Yellow Zone scenarios here...
    ]
  },
  green: {
    title: "ðŸ’š Green Zone â€“ Growth & Skill-Building",
    color: "green",
    scenarios: [
      {
        id: "time-management",
        title: "Time Management and Organization",
        tags: ["habits", "routines", "planning", "activation"],
        content: `
Behavioral activation, habit stacking, scheduling, and reinforcement. Use checklists, planners, and phone reminders.
---
"Let's try building a simple routine together..." (expand for full script)
        `
      }
      // Add more Green Zone scenarios here...
    ]
  }
};

const interventionsData = {
  "Distress Tolerance": [
    {
      id: "tipp",
      title: "TIPP (Rapid Distress Reduction)",
      tags: ["distress tolerance", "crisis", "body", "grounding"],
      content: `
TIPP: Temperature (cold water/ice), Intense exercise (jumping jacks), Paced breathing (4 in, 6 out), Paired muscle relaxation. Used for rapid physiological downregulation.
---
"Let's try a quick temperature shock or some paced breathing together..." (expand for full script)
      `
    }
    // Add more interventions here...
  ],
  "Cognitive Skills": [
    {
      id: "defusion",
      title: "Defusion (Unhooking from Unhelpful Thoughts)",
      tags: ["cognitive", "defusion", "thoughts", "ACT"],
      content: `
Notice and name thoughts as mental events. "I'm having the thought that..." or thank your mind for the thought. Builds psychological distance.
---
"Let's try noticing that thought together..." (expand for full script)
      `
    }
    // Add more cognitive skills interventions...
  ],
  "Self-Compassion": [
    {
      id: "self-compassion",
      title: "Self-Compassion",
      tags: ["compassion", "kindness", "validation", "emotion"],
      content: `
Invite the client to offer themselves the same kindness they'd give to a friend. Use simple affirmations or soothing self-talk.
---
"What would you say to a friend in your shoes? Let's try saying it to yourself..." (expand for full script)
      `
    }
    // Add more self-compassion interventions...
  ]
  // Add more categories here...
};


// ---- STATE ----
const dom = {};
const state = {
    currentView: 'dashboard',
    favorites: [],
    recentlyViewed: [],
    checkedScenarios: [],
    customContent: {},
    contentMap: new Map()
};


// ---- DOM POPULATOR ----
function populateDomObject() {
    [
        'sidebar-nav', 'content-area', 'user-id-display',
        'modalTitle', 'modalBody', 'scenarioModal', 'closeModal', 'toast',
        'searchBox', 'used-session-panel', 'resetSession'
    ].forEach(id => {
        const camel = id.replace(/-([a-z])/g, g => g[1].toUpperCase());
        dom[camel] = document.getElementById(id);
    });
}


// ---- DATA MAP ----
function initializeDataMap() {
    state.contentMap.clear();
    Object.values(clinicalData).forEach(zone => {
        zone.scenarios.forEach(s => state.contentMap.set(s.id, {...s, category: zone.title, color: zone.color}));
    });
    Object.entries(interventionsData).forEach(([category, items]) => {
        items.forEach(item => state.contentMap.set(item.id, {...item, category, color: 'indigo'}));
    });
    Object.values(state.customContent).forEach(item => state.contentMap.set(item.id, item));
}


// ---- SIDEBAR ----
const MAIN_TABS = [
    { id: 'dashboard', icon: 'layout-dashboard', label: 'Dashboard' },
    { id: 'favorites', icon: 'star', label: 'Favorites' },
    { id: 'recents', icon: 'clock', label: 'Recents' },
    { id: 'interventions', icon: 'activity', label: 'Interventions' }
];
function renderSidebarTabs() {
    const nav = dom.sidebarNav;
    nav.innerHTML = '';
    MAIN_TABS.forEach(tab => {
        const btn = document.createElement('button');
        btn.className = `sidebar-link w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left font-medium transition-colors${state.currentView === tab.id ? ' active' : ''}`;
        btn.dataset.tab = tab.id;
        btn.innerHTML = `<i data-lucide="${tab.icon}" class="h-5 w-5"></i> <span>${tab.label}</span>`;
        btn.addEventListener('click', () => switchView(tab.id));
        nav.appendChild(btn);
    });
    lucide.createIcons();
}


// ---- USED THIS SESSION PANEL ----
function renderUsedThisSession() {
    const panel = dom.usedSessionPanel;
    if (!state.checkedScenarios || state.checkedScenarios.length === 0) {
        panel.innerHTML = '';
        return;
    }
    const used = state.checkedScenarios.map(id => state.contentMap.get(id)).filter(Boolean);
    let html = `<div class="mb-3 p-3 bg-green-50 dark:bg-green-900 rounded">
        <div class="font-semibold text-green-800 dark:text-green-200 mb-2">Used this session:</div>
        <ul class="flex flex-wrap gap-2">`;
    used.forEach(item => {
        html += `<li class="bg-green-200 dark:bg-green-700 px-2 py-1 rounded text-xs text-green-900 dark:text-green-100">
            <i data-lucide="check-circle" class="inline h-4 w-4"></i> ${item.title}
        </li>`;
    });
    html += `</ul></div>`;
    panel.innerHTML = html;
    lucide.createIcons();
}
dom.resetSession?.addEventListener('click', () => {
    state.checkedScenarios = [];
    renderUsedThisSession();
    showToast("Session checklist cleared.", true);
});


// ---- COLOR MAP ----
const colorMap = {
    red: { border: 'border-red-500' },
    orange: { border: 'border-orange-500' },
    yellow: { border: 'border-yellow-500' },
    green: { border: 'border-green-500' },
    indigo: { border: 'border-indigo-500' }
};
// ---- CARD RENDERING ----
function createScenarioCard(scenario) {
    const isFavorited = state.favorites.includes(scenario.id);
    const isUsed = state.checkedScenarios.includes(scenario.id);
    const colors = colorMap[scenario.color] || colorMap.indigo;
    // Only show first non-empty paragraph as the summary
    const firstParagraph = scenario.content.split('\n').find(p => p.trim());
    // Tag badges
    const tagBadges = scenario.tags && scenario.tags.length
        ? scenario.tags.map(tag => `<span class="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 text-xs rounded mr-1">${tag}</span>`).join('')
        : '';
    const usedBadge = isUsed ? `<span class="used-badge">Used</span>` : '';
    const favBadge = isFavorited ? `<i data-lucide="star" class="inline h-4 w-4 text-yellow-400 mr-1"></i>` : '';
    const card = document.createElement('div');
    card.className = `scenario-card bg-white dark:bg-gray-800 p-4 rounded-lg cursor-pointer flex flex-col justify-between relative ${colors.border} mb-4`;
    card.dataset.id = scenario.id;
    card.innerHTML = `
        <div>
            <div class="flex items-center">
                <h3 class="font-semibold pr-2 text-gray-800 dark:text-gray-200">${favBadge}${scenario.title}${usedBadge}</h3>
            </div>
            <div class="scenario-summary mt-2 text-gray-600 dark:text-gray-400">${marked.parseInline(firstParagraph)}</div>
            <div class="mt-2">${tagBadges}</div>
            <button class="show-more text-xs text-indigo-600 mt-2 underline">Show more</button>
            <div class="scenario-full-content hidden mt-3">${marked.parse(scenario.content)}</div>
        </div>
        <div class="flex mt-2 space-x-2">
            <button class="favorite-star text-gray-400 dark:text-gray-600 ${isFavorited ? 'favorited' : ''}" title="Toggle Favorite">
                <i data-lucide="star" class="h-5 w-5"></i>
            </button>
            <button class="copy-btn text-gray-400 dark:text-gray-600" title="Copy Script"><i data-lucide="copy" class="h-5 w-5"></i></button>
            <button class="mark-used-btn text-gray-400 dark:text-gray-600" title="Mark as Used"><i data-lucide="check" class="h-5 w-5"></i></button>
        </div>
    `;
    card.querySelector('.show-more').addEventListener('click', (e) => {
        e.stopPropagation();
        const full = card.querySelector('.scenario-full-content');
        if (full.classList.contains('hidden')) {
            document.querySelectorAll('.scenario-full-content').forEach(el => el.classList.add('hidden'));
            card.querySelector('.show-more').textContent = "Show less";
            full.classList.remove('hidden');
        } else {
            full.classList.add('hidden');
            card.querySelector('.show-more').textContent = "Show more";
        }
    });
    card.querySelector('.favorite-star').addEventListener('click', (e) => {
        e.stopPropagation();
        toggleFavorite(scenario.id);
    });
    card.querySelector('.copy-btn').addEventListener('click', (e) => {
        e.stopPropagation();
        navigator.clipboard.writeText(scenario.content);
        showToast("Script copied to clipboard!", false);
    });
    card.querySelector('.mark-used-btn').addEventListener('click', (e) => {
        e.stopPropagation();
        if (!state.checkedScenarios.includes(scenario.id)) state.checkedScenarios.push(scenario.id);
        renderUsedThisSession();
        showToast("Marked as used.", true);
        switchView(state.currentView);
    });
    card.addEventListener('click', () => openModal(scenario));
    return card;
}

// ---- MODAL LOGIC ----
function openModal(scenario) {
    if (!scenario) return;
    state.currentOpenScenario = scenario;
    const tagBadges = scenario.tags && scenario.tags.length
        ? scenario.tags.map(tag => `<span class="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 text-xs rounded mr-1">${tag}</span>`).join('')
        : '';
    dom.modalTitle.innerHTML = `${scenario.title} ${tagBadges}`;
    dom.modalBody.innerHTML = `
        <div class="flex flex-wrap gap-2 mb-2">
            <button id="copyScript" class="bg-gray-200 dark:bg-gray-700 px-3 py-1 rounded text-xs text-gray-700 dark:text-gray-200">Copy Script</button>
            <button id="markUsed" class="bg-green-100 dark:bg-green-800 px-3 py-1 rounded text-xs text-green-700 dark:text-green-200">Mark as Used</button>
        </div>
        <div>${marked.parse(scenario.content)}</div>
    `;
    dom.scenarioModal.classList.remove('hidden');
    addToRecentlyViewed(scenario.id);
    lucide.createIcons();
    document.getElementById('copyScript')?.addEventListener('click', () => {
        navigator.clipboard.writeText(scenario.content);
        showToast("Script copied to clipboard!", false);
    });
    document.getElementById('markUsed')?.addEventListener('click', () => {
        if (!state.checkedScenarios.includes(scenario.id)) state.checkedScenarios.push(scenario.id);
        renderUsedThisSession();
        showToast("Marked as used.", true);
        dom.scenarioModal.classList.add('hidden');
        switchView(state.currentView);
    });
}
dom.closeModal?.addEventListener('click', () => {
    dom.scenarioModal.classList.add('hidden');
});

// ---- FAVORITES & RECENTS ----
function toggleFavorite(scenarioId) {
    const idx = state.favorites.indexOf(scenarioId);
    if (idx === -1) {
        state.favorites.unshift(scenarioId);
    } else {
        state.favorites.splice(idx, 1);
    }
    switchView(state.currentView);
}
function addToRecentlyViewed(scenarioId) {
    const idx = state.recentlyViewed.indexOf(scenarioId);
    if (idx !== -1) state.recentlyViewed.splice(idx, 1);
    state.recentlyViewed.unshift(scenarioId);
    if (state.recentlyViewed.length > 10) state.recentlyViewed.pop();
}

// ---- CARD LIST ----
function renderCardList(container, items, emptyMessage) {
    if (!container) return;
    container.innerHTML = '';
    if (items.length === 0) {
        container.innerHTML = `<p class="text-center text-gray-500 dark:text-gray-400 p-8 col-span-full">${emptyMessage}</p>`;
        return;
    }
    items.forEach(item => {
        if (item) container.appendChild(createScenarioCard(item));
    });
    lucide.createIcons();
}

// ---- TABS ----
function switchView(viewId) {
    state.currentView = viewId;
    document.querySelectorAll('.sidebar-link').forEach(link => {
        link.classList.toggle('active', link.dataset.tab === viewId);
    });
    dom.contentArea.innerHTML = '';
    renderUsedThisSession();

    if (viewId === 'dashboard') {
        const dashboardItems = Array.from(state.contentMap.values()).filter(item => item.category && item.category.includes('Zone'));
        renderCardList(dom.contentArea, dashboardItems, 'No scenarios found.');
    } else if (viewId === 'favorites') {
        const items = state.favorites.map(id => state.contentMap.get(id)).filter(Boolean);
        renderCardList(dom.contentArea, items, 'No favorites yet.');
    } else if (viewId === 'recents') {
        const items = state.recentlyViewed.map(id => state.contentMap.get(id)).filter(Boolean);
        renderCardList(dom.contentArea, items, 'No recently viewed scenarios.');
    } else if (viewId === 'interventions') {
        const items = [];
        Object.entries(interventionsData).forEach(([cat, arr]) => items.push(...arr));
        renderCardList(dom.contentArea, items, 'No interventions found.');
    }
}

// ---- SEARCH ----
dom.searchBox?.addEventListener('input', (e) => {
    const q = e.target.value.toLowerCase();
    let filtered = [];
    if (!q) {
        switchView(state.currentView);
        return;
    }
    filtered = Array.from(state.contentMap.values()).filter(
        item =>
            item.title.toLowerCase().includes(q) ||
            (item.content && item.content.toLowerCase().includes(q)) ||
            (item.tags && item.tags.some(tag => tag.includes(q)))
    );
    dom.contentArea.innerHTML = '';
    renderUsedThisSession();
    renderCardList(dom.contentArea, filtered, 'No matches found.');
});

// ---- TOAST ----
function showToast(message, isSubtle = false) {
    dom.toast.textContent = message;
    dom.toast.className = `fixed bottom-5 right-5 text-white py-2 px-4 rounded-lg shadow-lg z-50 ${isSubtle ? 'bg-gray-600 dark:bg-gray-700' : 'bg-green-500'}`;
    dom.toast.classList.remove('hidden');
    setTimeout(() => { dom.toast.classList.add('hidden'); }, 3000);
}

// ---- THEME ----
document.getElementById('theme-toggle')?.addEventListener('click', () => {
    document.documentElement.classList.toggle('dark');
});

// ---- MAIN ----
function main() {
    populateDomObject();
    renderSidebarTabs();
    initializeDataMap();
    switchView(state.currentView || 'dashboard');
    renderUsedThisSession();
}
document.addEventListener('DOMContentLoaded', main);
</script>
</body>
</html>
